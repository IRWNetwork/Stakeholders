<?php
defined('BASEPATH') OR exit('No direct script access allowed');
require_once APPPATH."/third_party/braintree-php/lib/Braintree.php";
class User extends MY_Controller
{

//// authorize.net properties//////
    const USE_PRODUCTION_SERVER  = 0;
    const USE_DEVELOPMENT_SERVER = 1;
    const EXCEPTION_CURL = 10;
    private $params  = array();
    private $items   = array();
    private $success = false;
    private $error   = true;
    private $addressId;
    private $login;
    private $transkey;
    private $xml;
    private $json;
    private $ch;
    private $response_use;
    private $url_use;
    private $resultCode;
    private $code;
    private $text;
    private $profileId;
    private $validation;
    private $paymentProfileId;
    private $results;
    private $xml_rezponse;
    private $customerPaymentProfileId;
    private $error_code;
    private $description;
    private $errorText;

//// authorize.net properties//////

    var $clientToken;
    function __construct() {

        parent::__construct();
        $this->load->model('Users_model');
        $this->load->model('Common_model');
        $this->load->model('Content_model');
        $this->load->model('Emailtemplates_model');
        $this->load->model('Authorize_model');
        $this->load->library("pagination");
        $this->load->library('ion_auth');
        //$this->load->library('Phpbb_bridge');
    }
    public function index() {

        redirect(site_url('user/login'), 'refresh');
    }

    public function phpbb_login(){
        define('IN_PHPBB', true);
        global $request;
        global $phpbb_container;
        global $phpbb_root_path, $phpEx, $user, $auth, $cache, $db, $config, $template, $table_prefix;
        global $request;
        global $phpbb_dispatcher;
        global $symfony_request;
        global $phpbb_filesystem;
        $phpbb_root_path = '../irw/forums/'; //the path to your phpbb relative to this script
        $phpEx = substr(strrchr(__FILE__, '.'), 1);
        include("forums/common.php"); ////the path to your phpbb relative to this script
        // Start session management
        $user->session_begin();
        $auth->acl($user->data);
        $user->setup();

        $username = 'admin';
        $password = 'atif$$786';
        if(isset($username) && isset($password))
        {
            $result=$auth->login($username, $password, true);
            if ($result['status'] == LOGIN_SUCCESS) {
                //echo "You're logged in";
            } else {
                //echo $user->lang[$result['error_msg']];
            }
        }
    }

    public function login() {
        if ($this->ion_auth->logged_in()) {
            redirect(site_url('/'), 'refresh');
        }

        $this->data['page_title'] 	= 'User Login';
        $this->data['page_heading'] 	= 'User Login';

        if($this->input->post()) {
            $rules = array(
                array(
                    'field'   => 'email',
                    'label'   => 'Email',
                    'rules'   => 'trim|required|valid_email'
                ),
                array(
                    'field'   => 'password',
                    'label'   => 'Password',
                    'rules'   => 'trim|required'
                )
            );

            $this->form_validation->set_rules($rules);

            if ($this->form_validation->run()) {

                $identity = $this->input->post("email");
                $password = $this->input->post("password");

                if($this->ion_auth->login($identity,$password)) {
                    //$this->phpbb_login($identity,$password);
                    $user = $this->ion_auth->user()->row();
                    $user_groups = $this->ion_auth->get_users_groups($user->id)->row();
                    //$this->Phpbb->user_login($identity,$password);
                    $this->session->set_userdata('userGroup', $user_groups->id);
                    $this->session->set_userdata('email',$user->username);
                    $this->session->set_userdata('content_block',$user->content_block);
                    $this->session->set_userdata('id',$user->id);
                    $this->session->set_userdata('uname',$user->first_name." ".$user->last_name);
                    $this->session->set_userdata('username',$user->first_name."_".$user->last_name);
                    $this->session->set_userdata('profile_pic',$user->picture);
                    $this->session->set_userdata('password',$password);

                    $_SESSION['customer_id'] =  $user->id;
                    //setcookie('customer_id', $user->id, time()+30*3600*24, '/');
                    if ($_SESSION['after_login']) {
                        redirect(site_url('/'.$_SESSION['after_login']), 'refresh');
                    }
                    redirect(site_url('/'), 'refresh');
                } else {
                    $this->session->set_flashdata(
                        'error',
                        'Invalid Email or Password'
                    );
                }
            }
        }

        $this->load->view('user/login',$this->data);
    }

    function register($flag=-1){
        if ($this->ion_auth->logged_in()) {
            redirect(site_url('/'), 'refresh');
        }
        //die($index);
        $this->data['page_title']   = 'User Registeration';
        $this->data['page_heading'] = 'User Registeration';
        $this->data['flag']		 = $flag;
        //print_r( $this->input->post()); die();
        if($this->input->post()) {
            if($this->input->post('flag')==2){
                $rules = array(
                    array(
                        'field'   => 'firstname',
                        'label'   => 'First Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'lastname',
                        'label'   => 'Last Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'email',
                        'label'   => 'Email',
                        'rules'   => 'trim|required|valid_email'
                    ),
                    array(
                        'field'   => 'password',
                        'label'   => 'Password',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'confirmPassword',
                        'label'   => 'Confirm Password',
                        'rules'   => 'trim|required|matches[password]'
                    ),
                    array(
                        'field'   => 'terms',
                        'label'   => 'Terms',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'brand',
                        'label'   => 'Brand',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'channel',
                        'label'   => 'Channel',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'salespitch',
                        'label'   => 'Sales Pitch',
                        'rules'   => 'trim|required'
                    )

                );


            }
            else if($this->input->post('flag') ==1 || $this->input->post('flag') ==3){
                $rules = array(
                    array(
                        'field'   => 'firstname',
                        'label'   => 'First Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'lastname',
                        'label'   => 'Last Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'email',
                        'label'   => 'Email',
                        'rules'   => 'trim|required|valid_email'
                    ),
                    array(
                        'field'   => 'password',
                        'label'   => 'Password',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'confirmPassword',
                        'label'   => 'Confirm Password',
                        'rules'   => 'trim|required|matches[password]'
                    ),
                    array(
                        'field'   => 'terms',
                        'label'   => 'Terms',
                        'rules'   => 'trim|required'
                    )

                );
            }
            else{
                $this->session->set_flashdata(
                    'error',
                    'Please Select Type'
                );
                redirect(site_url('/user/type'), 'refresh');
            }

            $this->form_validation->set_rules($rules);

            if ($this->form_validation->run()) {

                $password 	= $this->input->post('password');
                $email 		= $this->input->post('email');
                $username 	= $this->input->post('email');
                if($flag==2){
                    $additional_data = array(
                        'first_name'   => $this->input->post('firstname'),
                        'last_name' 	=>  $this->input->post('lastname'),
                        'brand_name'   =>  $this->input->post('brand'),
                        'channel_name' =>  $this->input->post('channel'),
                        'sales_pitch'  =>  $this->input->post('salespitch'),
                        'channel_subscription_price' =>  floatval($this->input->post('channel_price')),
                        'description' =>  floatval($this->input->post('description'))
                    );
                }
                if($flag==3){
                    $additional_data = array(
                        'first_name'   => $this->input->post('firstname'),
                        'last_name' 	=>  $this->input->post('lastname')
                    );
                }
                else{
                    $additional_data = array(
                        'first_name'   => $this->input->post('firstname'),
                        'last_name' 	=>  $this->input->post('lastname')
                    );
                }
                if (!$this->ion_auth->email_check($email))
                {
                    $group_name = array($this->input->post('flag')+1);
                    $last_id = $this->ion_auth->register($username, $password, $email, $additional_data, $group_name,$flag);

                    //$this->Phpbb->user_add($identity,$identity,$password);

                    //salted password for OC customers
                    $salt = substr(md5(uniqid(rand(), true)), 0, 9);
                    $oc_password = sha1($salt . sha1($salt . sha1($password)));
                    $first_name = $this->input->post('firstname');
                    $last_name = $this->input->post('lastname');

                    $this->register_oc($last_id, $first_name, $last_name, $email, $salt ,$oc_password);

                    $this->session->set_flashdata(
                        'success',
                        'Register Successfully'
                    );
                    redirect("home/");

                }else{
                    $this->session->set_flashdata(
                        'error',
                        'Email Already Exist'
                    );
                }
            }else{
                $this->session->set_flashdata(
                    'error',
                    'Please enter all details'
                );
            }
        }


        $this->load->view('user/register',$this->data);
    }
    function register_oc($last_id, $first_name, $last_name,$email ,$salt , $oc_password) {
        $data = array(
            'customer_id' => $last_id,
            'firstname'	=> $first_name,
            'lastname'	=> $last_name,
            'email'	=> $email,
            'salt'	=> $salt,
            'password'	=>	$oc_password,
            'status'	=> 1,
            'approved'	=> 1,
            'date_added'	=> date('Y-m-d H:i:s')
        );
        $this->db->insert('oc_customer', $data);
    }
    public function type(){
        //die("afdf");
        //if ($this->ion_auth->logged_in()) {
        //		redirect(site_url('/'), 'refresh');
        //	}

        $this->data['page_title'] 	= 'User Type';
        $this->data['page_heading']  = 'User Type';

        $this->load->view('user/type',$this->data);
    }


    function logout() {   //Basic Ion_Auth Logout function

        $this->ion_auth->logout();
        setcookie('customer_id', '', 1, '/');
        redirect('/');

    }

    public function forgotpassword() {

        if ($this->ion_auth->logged_in()) {
            redirect(site_url('/'), 'refresh');
        }

        $this->data['page_title'] 	= 'Forgot Password';
        $this->data['page_heading'] 	= 'Forgot Password';

        if($this->input->post()) {
            $rules = array(
                array(
                    'field'   => 'email',
                    'label'   => 'Email',
                    'rules'   => 'trim|required|valid_email'
                )
            );

            $this->form_validation->set_rules($rules);

            if ($this->form_validation->run()) {

                $emailAddress = $this->input->post("email");

                // get identity for that email
                $identity = $this->ion_auth->where('email', strtolower($emailAddress))->users()->row();

                if($identity) {
                    //run the forgotten password method to email an activation code to the user
                    $forgotten = $this->ion_auth->forgotten_password($identity->{$this->config->item('identity', 'ion_auth')});

                    // fetch user details
                    $user_detail = $this->Users_model->get_user_detail_by_email($emailAddress);
                    $firstName = $user_detail['first_name'];
                    $lastName = $user_detail['last_name'];

                    // Read unique code
                    $ucode = $user_detail['forgotten_password_code'];


                    // Send activation email to user
                    $subject = 'Leaders Portal Password Reset';
                    $this->data['full_name'] = $firstName . ' ' . $lastName;
                    $this->data['email'] = $emailAddress;
                    $this->data['url'] = site_url('user/reset_password').'/'.$ucode;

                    $result = $this->Emailtemplates_model->sendMail('forgot_password',$this->data);
                    $this->session->set_flashdata(
                        'success',
                        'A password reset email has been sent to you'
                    );
                    redirect(base_url().'user/forgotpassword', 'refresh');
                } else {
                    $this->session->set_flashdata(
                        'error',
                        'Email not found'
                    );

                    redirect(base_url().'user/forgotpassword', 'refresh');
                }
            }
        }

        $this->load->view('user/forgot-password',$this->data);
    }

    public function reset_password($code) {

        if ($this->ion_auth->logged_in()) {
            redirect(site_url('/'), 'refresh');
        }

        $this->data['page_title'] 	= 'Reset Password';
        $this->data['page_heading'] 	= 'Reset Password';

        $this->data['title'] = "Leaders Portal";
        $this->data['code'] = $code;
        $user = $this->ion_auth->forgotten_password_check($code);
        if ($user)
        {
            $this->data['user_id'] = $user->id;
            if($_POST)
            {

                $password = $this->input->post("password");
                $this->form_validation->set_rules('password', 'New Password', 'trim|required|min_length[5]|max_length[15]|matches[repassword]');
                $this->form_validation->set_rules('repassword', 'Confirm Password', 'trim|required|min_length[5]|max_length[15]');

                if ($this->form_validation->run())
                {
                    // do we have a valid request?
                    if ($user->id != $this->input->post('user_id'))
                    {
                        //something fishy might be up
                        $this->ion_auth->clear_forgotten_password_code($code);
                        show_error($this->lang->line('error_csrf'));
                    }
                    else
                    {
                        // finally change the password
                        $identity = $user->{$this->config->item('identity', 'ion_auth')};

                        $change = $this->ion_auth->reset_password($identity, $password);

                        if ($change)
                        {
                            //if the password was successfully changed
                            $this->session->set_flashdata('success', $this->ion_auth->messages());
                            //$this->logout();
                            redirect(site_url(''), 'refresh');
                        }
                        else
                        {
                            $this->session->set_flashdata('error', $this->ion_auth->errors());
                            redirect(site_url('user/reset_password') . '/'.$code, 'refresh');
                        }
                    }
                }
            }
        } else {
            //if the code is invalid then send them back to the forgot password page
            $this->session->set_flashdata('message', $this->ion_auth->errors());
            redirect(site_url('users'), 'refresh');
        }
        $this->load->view('user/resetpassword',$this->data);
    }

    public function changepassword() {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $this->data['page_title'] 	= 'Change Password';
        $this->data['page_heading'] 	= 'Change Password';

        $this->data['title'] = "Leaders Portal";
        if($_POST)
        {

            $password = $this->input->post("password");
            $this->form_validation->set_rules('password', 'New Password', 'trim|required|min_length[5]|max_length[15]|matches[repassword]');
            $this->form_validation->set_rules('repassword', 'Confirm Password', 'trim|required|min_length[5]|max_length[15]');

            if ($this->form_validation->run())
            {

                $user = $this->ion_auth->user()->row();
                // finally change the password
                $identity = $user->{$this->config->item('identity', 'ion_auth')};

                $data = array(
                    "password" => $this->input->post('password')
                );

                $id = $user->id;
                $change = $this->ion_auth->update($id, $data);
                if ($change)
                {
                    //if the password was successfully changed
                    $this->session->set_flashdata('success', "Password updated successfully");
                    //$this->logout();
                    redirect(site_url('user/changepassword'), 'refresh');
                }
                else
                {
                    $this->session->set_flashdata('error', $this->ion_auth->errors());
                    redirect(site_url('user/changepassword') . '/'.$code, 'refresh');
                }
            }
        }

        $parser['content'] = $this->load->view('user/changepassword',$this->data,true);
        $this->parser->parse('template', $parser);
    }

    public function profile() {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $this->data['page_title'] 	= 'Profile';
        $this->data['page_heading'] 	= 'Profile';

        //print_r($this->session->all_userdata());
        if($this->input->post()) {
            if($this->ion_auth->user()->row()->id==3){
                $rules = array(
                    array(
                        'field'   => 'first_name',
                        'label'   => 'First Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'last_name',
                        'label'   => 'Last Name',
                        'rules'   => 'trim|required'
                    )
                ,
                    array(
                        'field'   => 'channel_subscription_price',
                        'label'   => 'Channel Subscription Price',
                        'rules'   => 'trim|required'
                    )
                );
            }
            else{
                $rules = array(
                    array(
                        'field'   => 'first_name',
                        'label'   => 'First Name',
                        'rules'   => 'trim|required'
                    ),
                    array(
                        'field'   => 'last_name',
                        'label'   => 'Last Name',
                        'rules'   => 'trim|required'
                    )
                );

            }
            if($this->input->post("type")=="Video"){
                $rules[] = array(
                    'field'   => 'video_type',
                    'label'   => 'Video Type',
                    'rules'   => 'trim|required'
                );
                if($this->input->post("video_type")=="embed_code"){
                    $rules[] = array(
                        'field'   => 'embed_code',
                        'label'   => 'Embed Code',
                        'rules'   => 'trim|required'
                    );
                }
            }

            $this->form_validation->set_rules($rules);

            if ($this->form_validation->run()) {
                $file_name 		= $this->input->post("embed_code");

                if($_FILES['file']['tmp_name']){
                    $file_name 	= 'file_' . time();
                    $source   	= $_FILES['file'];
                    $file_name 	= $this->Common_model->uploadFileToGoogle($source,$file_name);
                }


                $user_id = $this->ion_auth->user()->row()->id;
                // finally change the password
                if($this->ion_auth->user()->row()->id==3){
                    $data = array(
                        "first_name" 				   	=> $this->input->post('first_name'),
                        "last_name" 					=> $this->input->post('last_name'),
                        "phone" 						=> $this->input->post('phone'),
                        "video_type"                    => $this->input->post("video_type"),
                        "video"                         => $file_name,
                        "channel_subscription_price"   	=> $this->input->post('channel_subscription_price')
                    );
                }
                else{
                    $data = array(
                        "first_name" 				    => $this->input->post('first_name'),
                        "last_name" 					=> $this->input->post('last_name'),
                        "phone" 						=> $this->input->post('phone'),
                        "video"                         => $file_name,
                        "video_type"                    => $this->input->post("video_type")
                        /*"video"						=>
                                (strpos($file_name,"&"))?
                                    substr(str_replace("watch?v=","embed/",$file_name),0,strpos($file_name,"&")-2):
                                        str_replace("watch?v=","embed/",$file_name)*/
                    );
                }
                $file_name ="";
                $banner1 ="";
                $banner ="";
                $this->session->set_userdata('uname',$this->input->post('first_name')." ".$this->input->post('last_name'));
                if(isset($_FILES['picture']) and $_FILES['picture']['name']!=''){

                    $file_name = time().str_replace(' ','_',$_FILES['picture']['name']);
                    $this->session->set_userdata('profile_pic',$file_name);
                    $returnValue = $this->Common_model->uploadImageByFieldName('picture',$file_name, 'uploads/profile_pic/');

                    if($returnValue != true) {
                        $this->session->set_flashdata('error', 'Some error picture not upload');
                    }else{
                        $data['picture'] = $returnValue;
                        $this->session->set_userdata('profile_pic',$returnValue);
                        $name = "uploads/profile_pic/".$returnValue;
                        $destination = "uploads/profile_pic/thumb_200_".$returnValue;
                        $this->Common_model->generateThumb($name,array("200",""),$destination);

                        @unlink("uploads/profile_pic/".$this->input->post('old_pic'));
                        @unlink("uploads/profile_pic/thumb_200_".$this->input->post('old_pic'));
                    }
                }


                if(isset($_FILES['banner']) and $_FILES['banner']['name']!=''){

                    $banner = "banner".time().str_replace(' ','_',$_FILES['banner']['name']);
                    $returnValue = $this->Common_model->uploadImageByFieldName('banner',$banner, 'uploads/profile_pic/');
                    if($returnValue != true) {
                        $this->session->set_flashdata('error', 'Some error picture not upload');
                    }else{
                        $data['banner'] = $returnValue;
                        $name = "uploads/profile_pic/".$returnValue;
                        $destination = "uploads/profile_pic/thumb_200_".$returnValue;
                        $this->Common_model->generateThumb($name,array("200",""),$destination);

                        @unlink("uploads/profile_pic/".$this->input->post('banner_old_pic'));
                        @unlink("uploads/profile_pic/thumb_200_".$this->input->post('banner_old_pic'));
                    }
                }

                $change = $this->ion_auth->update($user_id, $data);
                $this->session->set_flashdata('success', 'Updated successfully');
                redirect(site_url('user/profile'), 'refresh');
            }
        }
        $this->data['user'] = $this->ion_auth->user()->row();
        $parser['content'] = $this->load->view('user/profile',$this->data,true);
        $this->parser->parse('template', $parser);
    }

    public function channelmarketplace() {
        $this->data['page_title'] 	= 'Channel Marketplace';
        $this->data['page_heading'] = 'Channel Marketplace';
        //$this->data['user_ids']     = $this->Users_model->getUserIdByGroupId();
        $chanel_users = $this->Users_model->getChanelUsers();
        $this->data['ContentList']  = $chanel_users;
        $this->data['bannerDetail'] = $this->Content_model->getBannerRowByField("page","channel_marketplace");


        if (isset($_POST['flag'])) {
            echo $this->load->view('user/channel_area',$this->data,true);
        }
        else {
            $parser['content']          = $this->load->view('user/channel_area',$this->data,true);
            $this->parser->parse('template', $parser);
        }
    }
    public function channeldescription($id=NULL){
        $this->data['page_title']    = "Channel Description";
        $this->data['page_heading']  = "Channel Description";
        $filter = $this->input->get('filter') ? $this->input->get('filter'):'';
        $this->data['channelDetail'] = $this->Users_model->getUserDetailById($id);
        $this->data['contents']      = $this->Content_model->getContentByUserId($id,$filter);
        $this->data['id'] = $id;
        $this->data['total_rows'] = count($this->data['contents']);
        $this->data['contents'] = array_slice($this->data['contents'], 0, 10);
        if (isset($_POST['flag'])) {
            echo $this->load->view('user/channel_description',$this->data,TRUE);
        }
        else {
            $parser['content']	       =  $this->load->view('user/channel_description',$this->data,TRUE);
            $this->parser->parse('template', $parser);
        }
    }

    public function channeldescription_ajax() {

        $id = $this->input->get('id');

        $config 			   = array();
        $config["base_url"]    = base_url() . "channeldescription";
        $config["total_rows"]  = $this->Users_model->getUserDetailcountById($id);


        $config["per_page"] = 5;
        $config["uri_segment"] = 3;
        $config['reuse_query_string']   = true;

        $this->pagination->initialize($config);
        $page = ($this->uri->segment(3)) ? $this->uri->segment(3) : 0;

        $this->data['contents'] = $this->Content_model->getContentByUserIdLimit($id,$page,$config["per_page"]);

        if (count($this->data['contents']) > 0) {
            echo $this->load->view('user/channeldescription_limit',$this->data,TRUE);
        }
    }

    public function filterchanneldescription($id=NULL){
        $this->data['page_title']    = "Channel Description";
        $this->data['page_heading']  = "Channel Description";
        $filter = $this->input->post('filter') ? $this->input->post('filter'):'';
        $this->data['channelDetail'] = $this->Users_model->getUserDetailById($id);

        $this->data['contents']      = $this->Content_model->getContentByUserId($id,$filter);

        echo $parser['content']	       =  $this->load->view('user/filter_channel_description',$this->data,TRUE);
        //$this->parser->parse('template', $parser);
    }


    public function upgradepackage() {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $this->data['page_title'] 	= 'Upgrade Package';
        $this->data['page_heading'] 	= 'Upgrade Package';
        $this->data['bannerDetail']  = $this->Content_model->getBannerRowByField("page","upgradepackage");
        $this->init_braintree();

        if($this->input->post()) {


            $user_id = $this->ion_auth->user()->row()->id;
            // finally change the password

            /*$result = Braintree_Transaction::sale(array(
                    "amount" 				=> 1.99,
                    "paymentMethodNonce" 	=> $_REQUEST['payment_method_nonce'],
                    "options" 				=> array(
                    "submitForSettlement" => true,
                    "storeInVaultOnSuccess"=>true
                    )
                ));*/

            $merchant_responce = $this->response_use;
            if ($this->resultCode == "Ok") {


                $braintree_token = "";
                $txn_id = $this->results['transId'];
                //if ($txn->paymentInstrumentType == 'credit_card') {
                //$braintree_token = $txn->creditCardDetails->token;
                /*}else if ($txn->paymentInstrumentType == 'paypal_account') {
                    $braintree_token = $txn->paypalDetails->token;
                }*/
                $next_recharge_date = getNextRechargeDate('month');
                $data_update 		= array(
                    "braintree_payment_token" 	=> '',
                    "next_recharge_date" 		=> $next_recharge_date,
                    "is_premium"				=> "yes"
                );
                $array_payment_log = array(
                    "user_id" 			 => $user_id,
                    "channel_id" 		  => 0,
                    "type" 				=> "subscription",
                    "amount"			  => 1.99,
                    "date_of_charge" 	  => date("Y-m-d"),
                    "merchant_responce"   => $merchant_responce,
                    "txn_id"              => $txn_id,
                    "status"			  => "Complete"
                );

                $this->ion_auth->update($user_id,$data_update);
                $this->Users_model->insertpaymentLogs($array_payment_log);

                $this->session->set_flashdata('success', "Package updated successfully, Now can buy any channel from channel Marketplace.");
                redirect(base_url()."user/upgradepackage");
            }else{
                $this->session->set_flashdata('error', $this->description);
                redirect(base_url()."user/upgradepackage");
            }

        }
        $this->data['clientToken']= $this->clientToken;
        $this->data['user'] 		= $this->ion_auth->user()->row();

        $parser['content'] 	= $this->load->view('user/upgradepackage',$this->data,true);
        $this->parser->parse('template', $parser);
    }

    public function upgradepackage_ajax () {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $this->data['page_title'] 	= 'Upgrade Package';
        $this->data['page_heading'] 	= 'Upgrade Package';
        $this->data['bannerDetail']  = $this->Content_model->getBannerRowByField("page","upgradepackage");
        $this->init_braintree();

        if ($this->input->post()) {


            $user_id = $this->ion_auth->user()->row()->id;
            // finally change the password

            /*$result = Braintree_Transaction::sale(array(
                    "amount" 				=> 1.99,
                    "paymentMethodNonce" 	=> $_REQUEST['payment_method_nonce'],
                    "options" 				=> array(
                    "submitForSettlement" => true,
                    "storeInVaultOnSuccess"=>true
                    )
                ));*/

            $merchant_responce = $this->response_use;
            if ($this->resultCode === 'Ok') {


                $braintree_token = "";
                $txn_id = $this->results['transId'];

                /*$txn = $result->transaction;
                if ($txn->paymentInstrumentType == 'credit_card') {
                    $braintree_token = $txn->creditCardDetails->token;
                }else if ($txn->paymentInstrumentType == 'paypal_account') {
                    $braintree_token = $txn->paypalDetails->token;
                }*/
                $next_recharge_date = getNextRechargeDate('month');
                $data_update 		= array(
                    "braintree_payment_token" 	=> '',
                    "next_recharge_date" 		=> $next_recharge_date,
                    "is_premium"				=> "yes"
                );
                $array_payment_log = array(
                    "user_id" 			 => $user_id,
                    "channel_id" 		  => 0,
                    "type" 				=> "subscription",
                    "amount"			  => 1.99,
                    "date_of_charge" 	  => date("Y-m-d"),
                    "merchant_responce"   => $merchant_responce,
                    "txn_id"              => $txn_id,
                    "status"			  => "Complete"
                );

                $this->ion_auth->update($user_id,$data_update);
                $this->Users_model->insertpaymentLogs($array_payment_log);

                $this->session->set_flashdata('success', "Package updated successfully, Now can buy any channel from channel Marketplace.");
                redirect(base_url()."user/upgradepackage");
            }else{
                $this->session->set_flashdata('error', $result->message);
                redirect(base_url()."user/upgradepackage");
            }

        }

        $this->data['clientToken']= $this->clientToken;
        $this->data['user'] = $this->ion_auth->user()->row();

        echo $this->load->view('user/upgradepackage',$this->data,true);

    }


    function channelsubscription($id=NULL) {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $user_row = $this->ion_auth->user()->row();

        /*if($user_row->is_premium){
         if($user_row->is_premium!='yes'){
          redirect(base_url()."user/upgradepackage");
         }
        }
        else{
         redirect(base_url()."user/upgradepackage");
        }*/

        $this->data['page_title']    = 'Subscrible Channel';
        $this->data['page_heading']  = 'Subscrible Channel';
        //$this->init_braintree();
        $this->data['channelInfo']   = $this->Users_model->getChannelSubscribeInfoByChannelId($id);
        $this->data['bannerDetail']  = $this->Content_model->getBannerRowByField("page","channel_subscription");
        $this->data['alreadyBuy']    = $this->Users_model->checkAlreadyBuy($id);

        $subs_price                  = $this->data['channelInfo']['channel_subscription_price'];
        $this->data['officalInfo']   = $this->Users_model->getChannelSubscribeInfoByChannelId("42");
        $this->data['flag_div']      = false;
        if($id!='42'){
            if(isset($user_row->is_premium)&&$user_row->is_premium!='yes'){
                $subs_price = $this->data['channelInfo']['channel_subscription_price']+$this->data['officalInfo']['channel_subscription_price'];
                $this->data['flag_div']  = true;
            }
        }
        if($id=="42"){
            if(isset($user_row->is_premium)&&$user_row->is_premium!='yes'){
                $subs_price = $this->data['channelInfo']['channel_subscription_price'];
            }
        }
        $this->data['chanelPrice']   = $subs_price;

        $user_id = $this->ion_auth->get_user_id();
        $this->login    = '6RG5b3yk9V';
        $this->transkey = '6VPpb7H5uGz7G92u';
        $has_profile = $this->Authorize_model->has_profile($user_id);
        $this->data['card_number']   = '';
        if($has_profile){
            $this->profileId =  $has_profile[0]->profile_id;
            $this->setParameter('customerProfileId', $this->profileId);
            $has_payment_profile = $this->Authorize_model->has_payment_profile($this->profileId);
            $this->setParameter('customerPaymentProfileId', $has_payment_profile[0]->payment_profile_id);
            $this->url_use = 'https://apitest.authorize.net/xml/v1/request.api';
            $this->getCustomerPaymentProfile();
            $card_number = $this->xml_rezponse->paymentProfile->payment->creditCard->cardNumber;
            $this->data['card_number']   = $card_number;
        }

        if($this->input->post()) {
            $this->charge_customer();



            if ($this->resultCode == 'Ok') {

                if( date('d') == 31 || (date('m') == 1 && date('d') > 28)){
                    $date = strtotime('last day of next month');
                } else {
                    $date = strtotime('+1 months');
                }
                $next_recharge_date = date('Y-m-d', $date);
                if(isset($user_row->is_premium) && $user_row->is_premium!='yes' ){
                    //$next_recharge_date = getNextRechargeDate('month');

                    $data_update   = array(
                        "next_recharge_date"   => $next_recharge_date,
                        "is_premium"    => "yes"
                    );

                    $array_payment_log = array(
                        "user_id"     => $user_id,
                        "channel_id"     => "42",
                        "type"     => "channel",
                        "amount"     => $this->data['officalInfo']['channel_subscription_price'],
                        "date_of_charge"    => date("Y-m-d"),
                        "merchant_responce"   => $this->response_use,
                        "status"     => "Complete"
                    );


                    $insert = array(
                        'user_id'             => $user_id,
                        'channel_id'          => '42',
                        'channel_name'        => $this->data['officalInfo']['channel_name'],
                        'amount'              => $this->data['officalInfo']['channel_subscription_price'],
                        'type'           => "monthly",
                        'next_recharge_date'  => $next_recharge_date,
                        'date'        => date('Y-m-d'),
                        'status'     => 'active'
                    );

                    $this->ion_auth->update($user_id,$data_update);
                    $this->Users_model->insertpaymentLogs($array_payment_log);
                    $this->Users_model->insertChannelSubscriptionDetail($insert);
                }

                if($id!="42"){

                    $array_payment_log = array(
                        "user_id"     => $user_id,
                        "channel_id"     => $id,
                        "type"     => "channel",
                        "amount"     => $this->data['channelInfo']['channel_subscription_price'],
                        "date_of_charge"    => date("Y-m-d"),
                        "merchant_responce"   => $this->response_use,
                        "status"     => "Complete"
                    );

                    $insert = array(
                        'user_id'             => $user_id,
                        'channel_id'          => $id,
                        'channel_name'        => $this->data['channelInfo']['channel_name'],
                        'amount'              => $this->data['channelInfo']['channel_subscription_price'],
                        'type'           => "monthly",
                        'next_recharge_date'  => $next_recharge_date,
                        'date'        => date('Y-m-d'),
                        'status'     => 'active'
                    );

                    $this->Users_model->insertpaymentLogs($array_payment_log);
                    $this->Users_model->insertChannelSubscriptionDetail($insert);
                }

                $this->session->set_flashdata('success', "Channel subscribed to successfully!");
                redirect(base_url()."user/channelsubscription/".$id);

                /// end payment section
            }else{
                $this->session->set_flashdata('error', 'Error is occured');
                redirect(base_url()."user/channelsubscription/".$id);
            }

            ///// here
        }

        $this->data['clientToken'] = $this->clientToken;
        $this->data['user']   = $this->ion_auth->user()->row();
        $parser['content'] = $this->load->view('user/channel_subscription',$this->data,true);
        $this->parser->parse('template', $parser);
    }
    public function channelsubscription1($id=NULL) {
        if (!$this->ion_auth->logged_in()) {
            redirect(site_url(''), 'refresh');
        }
        $user_row = $this->ion_auth->user()->row();

        if($user_row->is_premium){
            if($user_row->is_premium!='yes'){
                if (isset($_POST['flag'])) {
                    redirect(base_url()."user/upgradepackage_ajax");
                }
                redirect(base_url()."user/upgradepackage");
            }
        }
        else{
            redirect(base_url()."user/upgradepackage");
        }
        $this->data['page_title'] 	= 'Subscrible Channel';
        $this->data['page_heading']  = 'Subscrible Channel';
        $this->init_braintree();
        $this->data['channelInfo']   = $this->Users_model->getChannelSubscribeInfoByChannelId($id);
        $this->data['bannerDetail']  = $this->Content_model->getBannerRowByField("page","channel_subscription");
        $this->data['alreadyBuy']  = $this->Users_model->checkAlreadyBuy($id);

        if ($this->input->post() && !isset($_POST['flag'])) {
            $user_id = $this->ion_auth->get_user_id();
            // finally change the password

            /*$result = Braintree_Transaction::sale(array(
                    "amount" 				=> $this->data['channelInfo']['channel_subscription_price'],
                    "paymentMethodNonce" 	=> $_REQUEST['payment_method_nonce'],
                    "options" 				=> array(
                    "submitForSettlement" => true,
                    "storeInVaultOnSuccess"=>true
                    )
                ));*/

            $merchant_responce = $this->response_use;
            if ($this->resultCode == 'Ok') {
                $braintree_token = "";
                /*$txn = $result->transaction;
                if ($txn->paymentInstrumentType == 'credit_card') {
                    $braintree_token = $txn->creditCardDetails->token;
                }else if ($txn->paymentInstrumentType == 'paypal_account') {
                    $braintree_token = $txn->paypalDetails->token;
                }*/

                if( date('d') == 31 || (date('m') == 1 && date('d') > 28)){
                    $date = strtotime('last day of next month');
                } else {
                    $date = strtotime('+1 months');
                }

                $next_recharge_date = date('Y-m-d', $date);
                $insert = array(
                    'user_id'            	=> $user_id,
                    'channel_id'         	=> $id,
                    'channel_name'       	=> $this->data['channelInfo']['channel_name'],
                    'amount'             	=> $this->data['channelInfo']['channel_subscription_price'],
                    'type'		       		=> "monthly",
                    'next_recharge_date' 	=> $next_recharge_date,
                    'date'			   		=> date('Y-m-d'),
                    'status'			 	=> 'active'
                );

                $array_payment_log = array(
                    "user_id" 			 => $user_id,
                    "channel_id" 		  => $id,
                    "type" 				=> "channel",
                    "amount"			  => $this->data['channelInfo']['channel_subscription_price'],
                    "date_of_charge" 	  => date("Y-m-d"),
                    "merchant_responce"   => $merchant_responce,
                    "status"			  => "Complete"
                );


                $this->Users_model->insertChannelSubscriptionDetail($insert);
                $this->Users_model->insertpaymentLogs($array_payment_log);
                $this->session->set_flashdata('success', "Channel subscribed to successfully!");
                redirect(base_url()."user/channelsubscription/".$id);
            }else{
                $this->session->set_flashdata('error', $result->message);
                redirect(base_url()."user/channelsubscription/".$id);
            }

        }

        $this->data['clientToken'] = $this->clientToken;
        $this->data['user'] 		= $this->ion_auth->user()->row();

        if (isset($_POST['flag'])) {
            echo $this->load->view('user/channel_subscription',$this->data,true);
        }
        else {
            $parser['content'] = $this->load->view('user/channel_subscription',$this->data,true);
            $this->parser->parse('template', $parser);
        }
    }

    private function init_braintree(){
        $this->clientToken =  init_Braintree();
    }

    function favorite(){

        if (!$this->ion_auth->logged_in()) {
            redirect(site_url('/'), 'refresh');
        }

        $user_id 	= $this->ion_auth->user()->row()->id;
        $this->data['page_title'] 		= 'Favorite';
        $this->data['page_heading'] 	= 'Favorite';
        $search 			   = $this->input->get('search')?$this->input->get('search'):"";
        $arr['name']           = $search;
        $config 			   = array();
        $config["base_url"]    = base_url() . "products/search";
        $config["total_rows"]  = $this->Content_model->countFavoriteSongs($user_id,$arr);
        if($this->input->get('per_page')){
            $config["per_page"]= $this->input->get('per_page');
        }else{
            $config["per_page"]= 20;
        }
        $config["uri_segment"] = 3;
        $config['reuse_query_string']   = true;
        $this->pagination->initialize($config);
        $page 		= ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
        $this->data['contents']	= $this->Content_model->getAllFavoriteSongs($user_id,$arr,$page,$config["per_page"]);

        $this->data["links"]   = $this->pagination->create_links();

        echo $this->load->view('user/favorite',$this->data,true);
        //$parser['content'] 	= $this->load->view('user/favorite',$this->data,true);
        //$this->parser->parse('template', $parser);
    }

    public function subscribechannel()
    {

        $data['page_title'] 	  	= 'Subscription Channel';
        $data['page_heading'] 		= 'Subscription Channel';
        $arr['name']             	= $this->input->get('name') ? $this->input->get('name') : '';
        $config 			   	  	= array();
        $config["base_url"]      	= base_url() . "user/subscribechannel";
        $config["total_rows"]  		= $this->Users_model->countTotalChannelRowsByUserId($this->ion_auth->user()->row()->id, $arr);
        $config["per_page"]      	= 10;
        $config["uri_segment"]   	= 3;
        $config['reuse_query_string'] = TRUE;
        $this->pagination->initialize($config);
        $page 						= ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
        $data['channels']	   		= $this->Users_model->getAllChannelByUserId($this->ion_auth->user()->row()->id, array(),$page,$config["per_page"]);
        $data["links"]         		= $this->pagination->create_links();
        $parser['content']	   		= $this->load->view('user/channel_subscription_listing',$data,TRUE);
        $this->parser->parse('template', $parser);
    }

    public function paymenthistory()
    {

        $data['page_title'] 	  = 'Payment History';
        $data['page_heading'] 	= 'Payment History';
        $arr['name']             = $this->input->get('name') ? $this->input->get('name') : '';
        $config 			   	  = array();
        $config["base_url"]      = base_url() . "user/paymenthistory";
        $config["total_rows"]  	= $this->Users_model->countTotalPaymentLogsRowsByUserId($this->ion_auth->user()->row()->id, $arr);
        $config["per_page"]      = 10;
        $config["uri_segment"]   = 3;
        $config['reuse_query_string'] = TRUE;

        $this->pagination->initialize($config);
        $page 					= ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;
        $data['payment_logs']	= $this->Users_model->getAllPaymentHistoryByUserId($this->ion_auth->user()->row()->id, array(),$page,$config["per_page"]);
        $data["links"]           = $this->pagination->create_links();
        $parser['content']	   = $this->load->view('user/payment_history_listing',$data,TRUE);
        $this->parser->parse('template', $parser);
    }

    public function unsubscribechannel(){

        if(!empty($this->input->get('id'))){

            $this->Users_model->unsubcribeChannelById($this->input->get('id'),array());
            $this->session->set_flashdata('success', "Channnel Unsubscribe successfully");
            redirect(base_url()."user/subscribechannel");
        }
        else{

            redirect(base_url()."user/subscribechannel");

        }


    }

























////// below i s code for authorize.net ////////
    public function __toString()
    {
        if (!$this->params)
        {
            return (string) $this;
        }
        $output  = '<table summary="Authnet Results" id="authnet">' . "\n";
        $output .= '<tr>' . "\n\t\t" . '<th colspan="2"><b>Outgoing Parameters</b></th>' . "\n" . '</tr>' . "\n";
        foreach ($this->params as $key => $value)
        {
            $output .= "\t" . '<tr>' . "\n\t\t" . '<td><b>' . $key . '</b></td>';
            $output .= '<td>' . $value . '</td>' . "\n" . '</tr>' . "\n";
        }

        $output .= '</table>' . "\n";
        if (!empty($this->xml))
        {
            $output .= 'XML: ';
            $output .= htmlentities($this->xml);
        }
        return $output;
    }
    private function parseResults()
    {
        $response = str_replace('xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"', '', $this->response_use);
        $xml = new SimpleXMLElement($response);
        $this->xml_rezponse = $xml;
        $this->resultCode       = (string) $xml->messages->resultCode;
        $this->code             = (string) $xml->messages->message->code;
        $this->text             = (string) $xml->messages->message->text;
        $this->validation       = (string) $xml->validationDirectResponse;
        $this->directResponse   = (string) $xml->directResponse;
        $this->profileId        = (int) $xml->customerProfileId;
        $this->addressId        = (int) $xml->customerAddressId;
        $this->paymentProfileId = (int) $xml->customerPaymentProfileId;
        $this->results          = explode(',', $this->directResponse);
        //$this->error_code       = (string) $xml->error->errorText;
    }
    private function parseCuResults()
    {
        $response = str_replace('xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd"', '', $this->response_use);
        $xml = new SimpleXMLElement($response);
        $this->resultCode       = (string) $xml->messages->resultCode;
        $this->code             = (string) $xml->messages->message->code;
        $this->text             = (string) $xml->messages->message->text;
        $this->description      = (string) $xml->transactionResponse->messaage->description;

        $responseCode           = $xml->transactionResponse->responseCode;
        $authCode               = $xml->transactionResponse->authCode;
        $avsResultCode               = $xml->transactionResponse->avsResultCode;
        $transId               = $xml->transactionResponse->transId;
        $transHash               = $xml->transactionResponse->transHash;
        $accountNumber               = $xml->transactionResponse->accountNumber;
        $result_arr = array("responseCode"=>$responseCode,
            "authCode"=>$authCode,
            "avsResultCode"=>$avsResultCode,
            "transId"=>$transId,
            "transHash"=>$transHash,
            "accountNumber"=>$accountNumber);
        $this->results = $result_arr;

    }
    private function process($charge_cus=false)
    {
        $this->ch = curl_init();
        curl_setopt($this->ch, CURLOPT_URL, $this->url_use);
        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($this->ch, CURLOPT_HTTPHEADER, Array("Content-Type: text/xml"));
        curl_setopt($this->ch, CURLOPT_HEADER, 0);
        curl_setopt($this->ch, CURLOPT_POSTFIELDS, $this->xml);
        curl_setopt($this->ch, CURLOPT_POST, 1);
        curl_setopt($this->ch, CURLOPT_SSL_VERIFYPEER, 0);
        $this->response_use = curl_exec($this->ch);
        if($this->response_use)
        {

            if($charge_cus){
                $this->parseCuResults();
            }else{
                $this->parseResults();
            }



            if ($this->resultCode === 'Ok')
            {
                $this->success = true;
                $this->error   = false;
            }
            else
            {
                $this->success = false;
                $this->error   = true;
                $this->error_code;
            }
            curl_close($this->ch);
            unset($this->ch);
        }
        else
        {
            var_dump(curl_getinfo($this->ch));
        }
    }
    public function createCustomerProfile($use_profiles = false, $type = 'credit')
    {
        $this->xml = '<?xml version="1.0" encoding="utf-8"?>
                      <createCustomerProfileRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
                          <merchantAuthentication>
                              <name>' . $this->login . '</name>
                              <transactionKey>' . $this->transkey . '</transactionKey>
                          </merchantAuthentication>';
        if (!empty($this->params['refId']))
        {
            $this->xml .= '
                          <refId>'. $this->params['refId'] .'</refId>';
        }
        $this->xml .= '
                          <profile>
                              <merchantCustomerId>'. $this->params['merchantCustomerId'].'</merchantCustomerId>
                              <description>'. $this->params['description'].'</description>
                              <email>'. $this->params['email'] .'</email>';

        if ($use_profiles == true)
        {
            $this->xml .= '
                              <paymentProfiles>
                                  <customerType>'. $this->params['customerType'].'</customerType>
                                  <billTo>
                                      <firstName>'. $this->params['billToFirstName'].'</firstName>
                                      <lastName>'. $this->params['billToLastName'].'</lastName>
                                      <company>'. $this->params['billToCompany'] .'</company>
                                      <address>'. $this->params['billToAddress'] .'</address>
                                      <city>'. $this->params['billToCity'] .'</city>
                                      <state>'. $this->params['billToState'] .'</state>
                                      <zip>'. $this->params['billToZip'] .'</zip>
                                      <country>'. $this->params['billToCountry'] .'</country>
                                      <phoneNumber>'. $this->params['billToPhoneNumber'].'</phoneNumber>
                                      <faxNumber>'. $this->params['billToFaxNumber'].'</faxNumber>
                                  </billTo>
                                  <payment>';
            if ($type === 'credit')
            {
                $this->xml .= '
                                      <creditCard>
                                          <cardNumber>'. $this->params['cardNumber'].'</cardNumber>
                                          <expirationDate>'.$this->params['expirationDate'].'</expirationDate>
                                      </creditCard>';
            }
            else if ($type === 'check')
            {
                $this->xml .= '
                                      <bankAccount>
                                          <accountType>'.$this->params['accountType'].'</accountType>
                                          <nameOnAccount>'.$this->params['nameOnAccount'].'</nameOnAccount>
                                          <echeckType>'. $this->params['echeckType'].'</echeckType>
                                          <bankName>'. $this->params['bankName'].'</bankName>
                                          <routingNumber>'.$this->params['routingNumber'].'</routingNumber>
                                          <accountNumber>'.$this->params['accountNumber'].'</accountNumber>
                                      </bankAccount>
                                      <driversLicense>
                                          <dlState>'. $this->params['dlState'].'</dlState>
                                          <dlNumber>'. $this->params['dlNumber'].'</dlNumber>
                                          <dlDateOfBirth>'.$this->params['dlDateOfBirth'].'</dlDateOfBirth>
                                      </driversLicense>';
            }
            $this->xml .= '
                                  </payment>
                              </paymentProfiles>
                              <shipToList>
                                  <firstName>'. $this->params['shipToFirstName'].'</firstName>
                                  <lastName>'. $this->params['shipToLastName'].'</lastName>
                                  <company>'. $this->params['shipToCompany'] .'</company>
                                  <address>'. $this->params['shipToAddress'] .'</address>
                                  <city>'. $this->params['shipToCity'] .'</city>
                                  <state>'. $this->params['shipToState'] .'</state>
                                  <zip>'. $this->params['shipToZip'] .'</zip>
                                  <country>'. $this->params['shipToCountry'] .'</country>
                                  <phoneNumber>'. $this->params['shipToPhoneNumber'].'</phoneNumber>
                                  <faxNumber>'. $this->params['shipToFaxNumber'].'</faxNumber>
                              </shipToList>';
        }
        $this->xml .= '
                          </profile>
                      </createCustomerProfileRequest>';
        $this->process();
    }
    public function getProfileID()
    {
        return $this->profileId;
    }
    public function setParameter($field = '', $value = null)
    {
        $field = (is_string($field)) ? trim($field) : $field;
        $value = (is_string($value)) ? trim($value) : $value;
        if (!is_string($field))
        {
            trigger_error(__METHOD__ . '() arg 1 must be a string: ' . gettype($field) . ' given.', E_USER_ERROR);
        }
        if (empty($field))
        {
            trigger_error(__METHOD__ . '() requires a parameter field to be named.', E_USER_ERROR);
        }
        if (!is_string($value) && !is_numeric($value) && !is_bool($value))
        {
            trigger_error(__METHOD__ . '() arg 2 (' . $field . ') must be a string, integer, or boolean value: ' . gettype($value) . ' given.', E_USER_ERROR);
        }
        if ($value === '' || is_null($value))
        {
            trigger_error(__METHOD__ . '() parameter "value" is empty or missing (parameter: ' . $field . ').', E_USER_NOTICE);
        }
        $this->params[$field] = $value;
    }
    public function createCustomerPaymentProfile($type = 'credit')
    {
        $this->xml = '<?xml version="1.0" encoding="utf-8"?>
                      <createCustomerPaymentProfileRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
                          <merchantAuthentication>
                              <name>' . $this->login . '</name>
                              <transactionKey>' . $this->transkey . '</transactionKey>
                          </merchantAuthentication>
                          <customerProfileId>'.$this->params['customerProfileId'].'</customerProfileId>
                          <paymentProfile>
                              <billTo>
                                  <firstName>'. @$this->params['billToFirstName'].'</firstName>
                                  <lastName>'. @$this->params['billToLastName'].'</lastName>
                                  <address>'. @$this->params['billToAddress'] .'</address>
                                  <city>'. @$this->params['billToCity'] .'</city>
                                  <state>'. @$this->params['billToState'] .'</state>
                                  <zip>'. @$this->params['billToZip'] .'</zip>
                                  <country>'. @$this->params['billToCountry'] .'</country>
                                  <phoneNumber>'. @$this->params['billToPhoneNumber'].'</phoneNumber>
                                  <faxNumber>'. @$this->params['billToFaxNumber'].'</faxNumber>
                              </billTo>
                              <payment>';
        if ($type === 'credit')
        {
            $this->xml .= '
                                  <creditCard>
                                      <cardNumber>'. $this->params['cardNumber'].'</cardNumber>
                                      <expirationDate>'.$this->params['expirationDate'].'</expirationDate>
                                  </creditCard>';
        }
        else if ($type === 'check')
        {
            $this->xml .= '
                                  <bankAccount>
                                      <accountType>'. $this->params['accountType'].'</accountType>
                                      <nameOnAccount>'.$this->params['nameOnAccount'].'</nameOnAccount>
                                      <echeckType>'. $this->params['echeckType'].'</echeckType>
                                      <bankName>'. $this->params['bankName'].'</bankName>
                                      <routingNumber>'.$this->params['routingNumber'].'</routingNumber>
                                      <accountNumber>'.$this->params['accountNumber'].'</accountNumber>
                                  </bankAccount>
                                  <driversLicense>
                                      <dlState>'. $this->params['dlState'] .'</dlState>
                                      <dlNumber>'. $this->params['dlNumber'].'</dlNumber>
                                      <dlDateOfBirth>'.$this->params['dlDateOfBirth'].'</dlDateOfBirth>
                                  </driversLicense>';
        }
        $this->xml .= '
                              </payment>
                          </paymentProfile>

                      </createCustomerPaymentProfileRequest>';
        $this->process();
    }
    public function getPaymentProfileId()
    {
        return $this->paymentProfileId;
    }
    public function createCustomerShippingAddress()
    {
        echo $this->xml = '<?xml version="1.0" encoding="utf-8"?>
                      <createCustomerShippingAddressRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
                          <merchantAuthentication>
                              <name>' . $this->login . '</name>
                              <transactionKey>' . $this->transkey . '</transactionKey>
                          </merchantAuthentication>
                          <refId>'. @$this->params['refId'] .'</refId>
                          <customerProfileId>'. $this->params['customerProfileId'].'</customerProfileId>
                          <address>
                              <firstName>'. $this->params['shipToFirstName'].'</firstName>
                              <lastName>'. $this->params['shipToLastName'].'</lastName>
                              <company>'. @$this->params['shipToCompany'] .'</company>
                              <address>'. $this->params['shipToAddress'] .'</address>
                              <city>'. $this->params['shipToCity'] .'</city>
                              <state>'. $this->params['shipToState'] .'</state>
                              <zip>'. $this->params['shipToZip'] .'</zip>
                              <country>'. $this->params['shipToCountry'] .'</country>
                              <phoneNumber>'. @$this->params['shipToPhoneNumber'].'</phoneNumber>
                              <faxNumber>'. @$this->params['shipToFaxNumber'].'</faxNumber>
                          </address>
                      </createCustomerShippingAddressRequest>';
        $this->process();
    }
    public function ChargeCustomerProfile(){
        $this->xml = '<createTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
       <merchantAuthentication>
        <name>' . $this->login . '</name>
        <transactionKey>' . $this->transkey . '</transactionKey>
      </merchantAuthentication>

  <transactionRequest>
    <transactionType>authCaptureTransaction</transactionType>
    <amount>'.$this->params['amount'].'</amount>
    <profile>
      <customerProfileId>'.$this->params['customerProfileId'].'</customerProfileId>
      <paymentProfile>
        <paymentProfileId>'.$this->params['customerPaymentProfileId'].'</paymentProfileId>
      </paymentProfile>
    </profile>
    <shipTo>
      <firstName>China</firstName>
      <lastName>Bayles</lastName>
      <company>Thyme for Tea</company>
      <address>12 Main Street</address>
      <city>Pecan Springs</city>
      <state>TX</state>
      <zip>44628</zip>
      <country>USA</country>
    </shipTo>
  </transactionRequest>
</createTransactionRequest>';
        $this->process(true);
    }
    public function getCustomerAddressId()
    {
        return $this->addressId;
    }

    private function getLineItems()
    {
        $tempXml = '';
        foreach ($this->items as $item)
        {
            foreach ($item as $key => $value)
            {
                $tempXml .= "\t" . '<' . $key . '>' . $value . '</' . $key . '>' . "\n";
            }
        }
        return $tempXml;
    }

    public function createCustomerProfileTransaction($type = 'profileTransAuthCapture')
    {
        $types = array('profileTransAuthCapture', 'profileTransCaptureOnly','profileTransAuthOnly');
        if (!in_array($type, $types))
        {
            trigger_error('createCustomerProfileTransaction() parameter must be"profileTransAuthCapture", "profileTransCaptureOnly", "profileTransAuthOnly", or empty', E_USER_ERROR);
        }

        $this->xml = '<?xml version="1.0" encoding="utf-8"?>
                      <createCustomerProfileTransactionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
                          <merchantAuthentication>
                              <name>' . $this->login . '</name>
                              <transactionKey>' . $this->transkey . '</transactionKey>
                          </merchantAuthentication>
                          <refId>'. @$this->params['refId'] .'</refId>
                          <transaction>
                              <' . $type . '>
                                  <amount>'. $this->params['amount'] .'</amount>';
        if (isset($this->params['taxAmount']))
        {
            $this->xml .= '
                                  <tax>
                                       <amount>'. $this->params['taxAmount'].'</amount>
                                       <name>'. $this->params['taxName'] .'</name>
                                       <description>'.$this->params['taxDescription'].'</description>
                                  </tax>';
        }
        if (isset($this->params['shipAmount']))
        {
            $this->xml .= '
                                  <shipping>
                                       <amount>'. $this->params['shipAmount'].'</amount>
                                       <name>'. $this->params['shipName'] .'</name>
                                       <description>'.$this->params['shipDescription'].'</description>
                                  </shipping>';
        }
        if (isset($this->params['dutyAmount']))
        {
            $this->xml .= '
                                  <duty>
                                       <amount>'. $this->params['dutyAmount'].'</amount>
                                       <name>'. $this->params['dutyName'] .'</name>
                                       <description>'.$this->params['dutyDescription'].'</description>
                                  </duty>';
        }
        $this->xml .= '

                                  <customerProfileId>'.$this->params['customerProfileId'].'</customerProfileId>
                                  <customerPaymentProfileId>'.$this->params['customerPaymentProfileId'].'</customerPaymentProfileId>
                                  <customerShippingAddressId>'.$this->params['customerShippingAddressId'].'</customerShippingAddressId>';
        if (isset($this->params['orderInvoiceNumber']))
        {
            $this->xml .= '
                                  <order>
                                       <invoiceNumber>'.$this->params['invoiceNumber'].'</orderInvoiceNumber>
                                       <description>'.$this->params['description'].'</orderDescription>
                                       <purchaseOrderNumber>'.$this->params['purchaseOrderNumber'].'</orderPurchaseOrderNumber>
                                  </order>';
        }
        $this->xml .= '
                                  <cardCode>'. $this->params['cardCode'].'</cardCode>';
        if (isset($this->params['orderInvoiceNumber']))
        {
            $this->xml .= '
                                  <approvalCode>'. $this->params['approvalCode'].'</approvalCode>';
        }
        $this->xml .= '
                              </' . $type . '>
                          </transaction>
                      </createCustomerProfileTransactionRequest>';
        $this->process();
    }
    public function getResponseSummary()
    {
        return 'Response code: ' . $this->getCode() . ' Message: ' . $this->getResponse();
    }
    public function getResponse()
    {
        return strip_tags($this->text);
    }

    public function getCode()
    {
        return $this->code;
    }
    public function getAuthCode()
    {
        return $this->results[4];
    }
    public function setLineItem($itemId, $name, $description, $quantity, $unitprice,$taxable = 'false')
    {
        $this->items[] = array('itemId' => $itemId, 'name' => $name, 'description' => $description, 'quantity' => $quantity, 'unitPrice' => $unitprice, 'taxable' => $taxable);
    }
    public function getCustomerProfile()
    {
        $this->xml = '<?xml version="1.0" encoding="utf-8"?>
                      <getCustomerProfileRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
                          <merchantAuthentication>
                              <name>' . $this->login . '</name>
                              <transactionKey>' . $this->transkey . '</transactionKey>
                          </merchantAuthentication>
                          <customerProfileId>'. $this->params['customerProfileId'].'</customerProfileId>

                      </getCustomerProfileRequest>';
        $this->process();
    }


    public function getCustomerPaymentProfile()
    {
        $this->xml = '<?xml version="1.0" encoding="utf-8"?>
						<getCustomerPaymentProfileRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
						  <merchantAuthentication>
							<name>' . $this->login . '</name>
							<transactionKey>' . $this->transkey . '</transactionKey>
						  </merchantAuthentication>
						  <customerProfileId>'. $this->params['customerProfileId'].'</customerProfileId>
						  <customerPaymentProfileId>'.$this->params['customerPaymentProfileId'].'</customerPaymentProfileId>
						</getCustomerPaymentProfileRequest>';
        $this->process();
    }


    public function charge_customer(){

        $url = 'https://test.authorize.net/gateway/transact.dll';
        $this->url_use = 'https://apitest.authorize.net/xml/v1/request.api';

        //$url = 'https://secure.networkmerchants.com/gateway/transact.dll';

        // oc_authorize_profile
        //$chk_profile = $this->db->query("select id from oc_authorize_profile");


        if($this->input->post('choose_card') == 'previous'){
            $this->url_use = 'https://apitest.authorize.net/xml/v1/request.api';
            $user_id = $this->ion_auth->get_user_id();
            $this->login    = '6RG5b3yk9V';
            $this->transkey = '6VPpb7H5uGz7G92u';
            $has_profile = $this->Authorize_model->has_profile($user_id);
            $this->profileId =  $has_profile[0]->profile_id;
            $this->setParameter('customerProfileId', $this->profileId);
            $has_payment_profile = $this->Authorize_model->has_payment_profile($this->profileId);
            $this->setParameter('customerPaymentProfileId', $has_payment_profile[0]->payment_profile_id);
            $this->getCustomerPaymentProfile();
            $credit_card_number = $this->xml_rezponse->paymentProfile->payment->creditCard->cardNumber;
            $has_shipping_address = $this->Authorize_model->has_shipping_address($has_profile[0]->profile_id);

            @$this->setParameter('customerShippingAddressId', $has_shipping_address[0]->shipping_address_id);
            @$this->setParameter('cardCode', $credit_card_number);
            @$this->setParameter('customerPaymentProfileId', $has_payment_profile[0]->payment_profile_id);
            @$this->setParameter('refId', $this->paymentProfileId);
            //@$this->setParameter('cardCode', $cvv);
            @$this->setParameter('amount',$this->input->post('chargable_amount'));
            ///create transaction
            $this->ChargeCustomerProfile();
        }else{
            $credit_card_number = $this->input->post('credit-card-number');
            $expiration = $this->input->post('expiration');
            $cvv = $this->input->post('cvv');
            $user_id = $this->session->userdata('user_id');
            $email = $this->session->userdata('identity');
            $user_info = $this->Users_model->get_user_detail_by_email($email);
            $has_profile = $this->Authorize_model->has_profile($user_id);
            $this->login    = '6RG5b3yk9V';
            $this->transkey = '6VPpb7H5uGz7G92u';
            if(!$has_profile){// check if profile already exists
                $this->setParameter('email', $email);
                $this->setParameter('description', "no desp");
                $this->setParameter('merchantCustomerId', uniqid());
                $this->createCustomerProfile();
                $this->Authorize_model->save_profile(array("user_id"=>$user_id, "profile_id"=>$this->profileId));
            }else{
                $this->profileId =  $has_profile[0]->profile_id;
                $this->setParameter('customerProfileId', $this->profileId);
            }

            $has_payment_profile = $this->Authorize_model->has_payment_profile($this->profileId);

            if(!$has_payment_profile){/// check if payment profile is created
                //set parameters for create payment profile
                @$this->setParameter('customerProfileId', $this->profileId);
                @$this->setParameter('billToFirstName', html_entity_decode($user_info->first_name, ENT_QUOTES, 'UTF-8'));
                @$this->setParameter('billToLastName',  html_entity_decode($user_info->last_name, ENT_QUOTES, 'UTF-8'));
                @$this->setParameter('billToAddress',   html_entity_decode($user_info->address, ENT_QUOTES, 'UTF-8'));
                //$this->setParameter('billToCompany', html_entity_decode($order_info['payment_company'], ENT_QUOTES, 'UTF-8'));
                @$this->setParameter('billToCity',      html_entity_decode($user_info->city, ENT_QUOTES, 'UTF-8'));
                @$this->setParameter('billToState', '');
                @$this->setParameter('billToZip', '');
                @$this->setParameter('billToCountry', '');
                @$this->setParameter('cardNumber', $credit_card_number);
                @$this->setParameter('expirationDate', $expiration);
                $this->createCustomerPaymentProfile();
                $this->Authorize_model->save_payment_profile(array("payment_profile_id"=>$this->paymentProfileId, "profile_id"=>$this->profileId));
            }else{
                $this->paymentProfileId =  $has_payment_profile[0]->payment_profile_id;
            }

            $has_shipping_address = $this->Authorize_model->has_shipping_address($this->profileId);

            if(!$has_shipping_address){// check if shipping address is creted
                /// create shipping address
                @$this->setParameter('shipToFirstName', 'F name');
                @$this->setParameter('shipToLastName', 'L Name');
                @$this->setParameter('shipToCompany', '');
                @$this->setParameter('shipToAddress', '');
                @$this->setParameter('shipToCity', '');
                @$this->setParameter('shipToState', '');
                @$this->setParameter('shipToZip', '');
                @$this->setParameter('shipToCountry', '');
                @$this->setParameter('shipToPhoneNumber', '');
                @$this->setParameter('shipToFaxNumber', '');
                $this->createCustomerShippingAddress();
                $this->Authorize_model->save_shipping_address(array("user_id"=>$user_id , "shipping_address_id"=>$this->getCustomerAddressId(), "profile_id"=>$this->params['customerProfileId']));
            }else{
                @$this->setParameter('customerShippingAddressId',$has_shipping_address[0]->shipping_address_id);
            }
            @$this->setParameter('customerShippingAddressId', $has_shipping_address[0]->shipping_address_id);
            @$this->setParameter('cardCode', $credit_card_number);
            @$this->setParameter('customerPaymentProfileId', $this->paymentProfileId);
            @$this->setParameter('refId', $this->paymentProfileId);
            @$this->setParameter('cardCode', $cvv);
            @$this->setParameter('amount', $this->input->post('chargable_amount'));
            ///create transaction
            $this->createCustomerProfileTransaction();
        }
    }
////// code for authorize.net end ////////


}// end class
